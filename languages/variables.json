{
    "no_args": "",
    "boolean_emoji": "args.boolean ? client.replyEmojis['success'] : client.replyEmojis['wrong']",
    "count": "args.count",
    "count2": "args.count2",
    "placeholder": "args.placeholder",
    "interaction_user_tag": "interaction.user?.tag",
    "interaction_user_id": "interaction.user?.id",
    "emoji_bot": "checkEmoji(args.canUseEmoji, client.replyEmojis['bot'])",
    "emoji_tools": "checkEmoji(args.canUseEmoji, client.replyEmojis['tools'])",
    "emoji_support": "checkEmoji(args.canUseEmoji, client.replyEmojis['support'])",
    "emoji_crown": "checkEmoji(args.canUseEmoji, client.replyEmojis['crown'])",
    "autolock_roles": "args.autoLockRoles",
    "text": "args.text",
    "current_emoji_url": "args.currentEmoji?.url || args.currentEmoji?.image",
    "interaction_options_channel": "interaction.options?.get('channel')?.value",
    "interaction_options_comment": "interaction.options.get('extra_infos') ? interaction.options.get('extra_infos').value : 'No comment'",
    "interaction_options_creator": "interaction.options.get('creator') ? interaction.options.get('creator').value : 'No creator added'",
    "interaction_options_role": "interaction.options.get('role')?.value",
    "interaction_channel": "interaction.options?.get('channel')?.value || interaction.channel?.id",
    "interaction_options_description": "interaction.options.get('description')?.value",
    "interaction_options_name": "interaction.options.get('name')?.value",
    "interaction_options_emoji": "interaction.options.get('emoji')?.value",
    "interaction_options_language": "interaction.options.get('language')?.value",
    "sticker_name": "args.sticker?.name",
    "attachment_url": "args.attachment?.url",
    "permissions": "args.permissions",
    "blacklist_emojis": "args.blacklistEmojis",
    "emojis": "args.emojis",
    "role": "args.role",
    "emoji": "args.currentEmoji.image ? `<${args.currentEmoji.animated === true ? 'a' : ''}:${args.currentEmoji.name}:${args.currentEmoji.id}>` :  args.currentEmoji.toString()",
    "lock_roles": "args.lockRoles?.map(role => `<@&${role}>`).join(', ')",
    "user_tag_or_mention": "args.user?.tag || `<@${args.user?.id}>`",
    "blacklisted_emoji_comment": "args.blacklistedEmoji?.comment",
    "current_emoji_roles": " let roles = (args.rolesCurrentEmoji == 'Nothing'  ?  await client.getLanguage.getCommandContent('emoji-info', ['interactions', 'slash_commands'], interaction, { 'type': 'nothing', 'interaction': interaction}) : args.rolesCurrentEmoji?.join(', ')); return roles",
    "current_emoji_id": "args.currentEmoji?.id",
    "current_emoji_name": "args.currentEmoji.name",
    "current_emoji_author": "let author = await args.currentEmoji.fetchAuthor(); return author.username + '#' + author.discriminator",
    "current_emoji_creation_timestamp": "Math.floor(args.currentEmoji.createdTimestamp / 1000)",
    "current_emoji_managed": "return args.currentEmoji.managed == true ? await client.getLanguage.getCommandContent('emoji-info', ['interactions', 'slash_commands'], interaction, { 'type': 'true', 'interaction': interaction}) : await client.getLanguage.getCommandContent('emoji-info', ['interactions', 'slash_commands'], interaction, { 'type': 'false', 'interaction': interaction})",
    "new_emoji_name": "args.newEmoji.name",
    "new_emoji_name_interaction": "args.interaction.options?.get('name').value",
    "new_language_interaction": "args.interaction.options?.get('language')?.value",
    "new_language": "client.supportedLanguages.get(args.interaction.options?.get('language')?.value)?.native_name",
    "new_language_button": "client.supportedLanguages.get(args.newLanguage)?.native_name",
    "error": "args.error",
    "user_tag": "args.user?.tag || args.interaction.user?.tag",
    "interaction_guild_name_blacklist": "interaction.guild.name.length > 60 ? interaction.guild.name.slice(0, -40) : interaction.guild.name",
    "blacklisted_emojis": "args.blacklistedEmojis",
    "interaction_guild_icon": "interaction.guild.iconURL({ dynamic: true })",
    "attachment_name": "args.attachment?.name",
    "timestamp": "new Date()"
}